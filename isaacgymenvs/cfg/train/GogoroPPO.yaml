params:
  seed: ${...seed}

  algo:
    name: a2c_continuous

  model:
    name: continuous_a2c_logstd

  network:
    name: actor_critic
    separate: False
    space:
      continuous:
        mu_activation: None
        sigma_activation: None

        mu_init:
          name: default
        sigma_init:
          name: const_initializer
          val: 0. # std = 1.
        fixed_sigma: True

    mlp:
      units: [256, 128, 64]
      activation: selu
      d2rl: False

      initializer:
        name: default
      regularizer:
        name: None

  load_checkpoint: ${if:${...checkpoint},True,False} # flag which sets whether to load the checkpoint
  load_path: ${...checkpoint} # path to the checkpoint to load

  config:
    name: ${resolve_default:Gogoro,${....experiment}}
    full_experiment_name: ${.name}
    env_name: rlgpu
    ppo: True
    mixed_precision: True
    normalize_input: True
    normalize_value: True
    value_bootstrap: True
    num_actors: ${....task.env.numEnvs}
    reward_shaper:
      scale_value: 1.0
    normalize_advantage: True
    gamma: 0.99
    tau: 0.95
    e_clip: 0.2
    entropy_coef: 0.0
    learning_rate: 5e-4 # overwritten by adaptive lr_schedule
    lr_schedule: adaptive
    kl_threshold: 0.008 # target kl for adaptive lr
    truncate_grads: True
    grad_norm: 1.
    horizon_length: 16
    minibatch_size: 16384
    mini_epochs: 4
    critic_coef: 2
    clip_value: True
    seq_len: 4 # only for rnn
    bounds_loss_coef: 0.0001

    max_epochs: ${resolve_default:1000000000000,${....max_iterations}}
    save_best_after: 200
    score_to_win: 200000000000000000000000
    save_frequency: 50
    print_stats: True

# params:  

#   seed: ${...seed}

#   algo:
#     name: sac

#   model:
#     name: soft_actor_critic

#   network:
#     name: soft_actor_critic
#     separate: True
#     space:
#       continuous:
#     mlp:
#       units: [128, 64]
#       activation: elu
      
#       initializer:
#         name: default
#     log_std_bounds: [-5, 2]

#   load_checkpoint: False

#   config:
#     name: ${resolve_default:Gogoro,${....experiment}}
#     env_name: rlgpu
#     normalize_input: False
#     reward_shaper:
#       scale_value: 1.0
#     max_epochs: 1000000000000
#     num_steps_per_episode: 8
#     save_best_after: 100
#     save_frequency: 1000
#     gamma: 0.99
#     init_alpha: 1.0
#     alpha_lr: 0.005

#     actor_lr: 0.0005
#     critic_lr: 0.0005


#     lr_schedule: adaptive
#     kl_threshold: 0.008 # target kl for adaptive lr

#     critic_tau: 0.005
#     batch_size: 4096
#     learnable_temperature: true
#     num_seed_steps: 5
#     num_warmup_steps: 10
#     replay_buffer_size: 1000000
#     num_actors: ${....task.env.numEnvs}



# params:
#   seed: ${...seed}

#   algo:
#     name: a2c_continuous

#   model:
#     name: continuous_a2c_logstd

#   network:
#     name: actor_critic
#     separate: False

#     space:
#       continuous:
#         mu_activation: None
#         sigma_activation: None
#         mu_init:
#           name: default
#         sigma_init:
#           name: const_initializer
#           val: 0
#         fixed_sigma: True

#     mlp:
#       units: [256, 128]
#       activation: elu
#       d2rl: False

#       initializer:
#         name: default
#       regularizer:
#         name: None

#     rnn:
#       name: lstm
#       units: 256
#       layers: 3
#       before_mlp: True
#       concat_input: True
#       layer_norm: True

#   load_checkpoint: ${if:${...checkpoint},True,False} # flag which sets whether to load the checkpoint
#   load_path: ${...checkpoint} # path to the checkpoint to load


#   config:
#     name: ${resolve_default:Gogoro,${....experiment}}
#     full_experiment_name: ${.name}
#     env_name: rlgpu
#     multi_gpu: ${....multi_gpu}
#     ppo: True
#     mixed_precision: False
#     normalize_input: True
#     normalize_value: True
#     num_actors: ${....task.env.numEnvs}
#     reward_shaper:
#       scale_value: 0.01
#     normalize_advantage: True
#     gamma: 0.99
#     tau: 0.95
#     learning_rate: 5e-4
#     lr_schedule: adaptive
#     schedule_type: standard
#     kl_threshold: 0.016
#     score_to_win: 1000000000000000000
#     save_best_after: 500
#     save_frequency: 100
#     print_stats: True
#     grad_norm: 1.0
#     entropy_coef: 0.0
#     truncate_grads: True
#     e_clip: 0.2
#     horizon_length: 32
#     minibatch_size: 16384
#     mini_epochs: ${resolve_default:4,${....max_iterations}}
#     critic_coef: 4
#     clip_value: False
#     seq_len: 4
#     bounds_loss_coef: 0.0001
#     max_epochs: 1000000000000

    # player:
    #   #render: True
    #   deterministic: True
    #   games_num: 100000
    #   print_stats: True